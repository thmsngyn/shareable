{"version":3,"sources":["redux/reducers/currently-playing.reducer.tsx","redux/reducers/index.tsx","redux/store.tsx","App.tsx","serviceWorker.js","index.js","services/storage/storage.constants.tsx","services/storage/storage.service.tsx","styles/shared-spacing.tsx","styles/shared-colors.tsx","styles/shared-text.tsx","redux/actions/actions.tsx","utils/hash.tsx","utils/http.utils.tsx","utils/routing.tsx","utils/media-queries.tsx","services/spotify/spotify.constants.tsx","config.js","components/shared/button.component.tsx","pages/shared-layout/shared-layout.page.tsx","pages/stream/stream.page.tsx","pages/home/home.page.tsx","pages/account/account.page.tsx","pages/stats/stats.page.tsx","services/shareable/shareable.constants.tsx","services/spotify/spotify.types.tsx","services/spotify/spotify.service.tsx","components/shared/section.component.tsx","services/shareable/index.tsx","services/shareable/shareable.service.tsx","assets/bg.jpg","assets/badminton.png","components/track/track.component.tsx","components/player/player.component.tsx","components/footer/footer.component.tsx","components/header/header.component.tsx","components/profile/profile.component.tsx","assets/logo.png"],"names":["initialState","track","undefined","isPlaying","rootReducer","combineReducers","focusedTrack","state","action","type","ActionTypes","SET_FOCUSED","id","payload","PAUSE_FOCUSED","middleware","reduxThunk","store","config","obfuscateDevTools","createStore","applyMiddleware","composeWithDevTools","App","props","loggedIn","token","SpotifyService","resolveUserToken","this","setState","isMobile","responsiveStyle","styles","routeContainer","marginLeft","getAppMargin","marginRight","style","AppRoutes","map","route","path","page","key","exact","component","basename","app","renderRoutes","React","Component","hot","withSizes","mapSizesToProps","backgroundImage","backgroundSize","minHeight","display","flexDirection","color","Colors","c100","fontFamily","fontWeight","marginTop","APP_HEADER_HEIGHT","marginBottom","APP_FOOTER_HEIGHT","paddingTop","Spacing","s24","overflow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","StorageKeys","StorageService","storage","localStorage","getItem","data","setItem","log","duration","expirationsValue","get","KeyDecay","expirations","JSON","parse","Date","now","set","stringify","Object","entries","forEach","val","Number","remove","removeItem","s224","s64","s512","FontSizes","ExtraLarge","fontSize","lineHeight","Large","MediumLarge","Medium","MediumSmall","Small","ExtraSmall","setFocused","playSong","dispatch","playSongs","uri","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","parseJson","response","text","Home","header","Stats","Stream","Account","rightAlignedHeader","width","PLAYER_API","SAVED_TRACKS_API","USER_PROFILE_API","USER_TOP_API","PLAYER_PLAY_API","LOGIN_OAUTH","clientId","redirectUri","scopes","join","shareableServiceUri","ButtonTypes","Button","children","classes","materialProps","buttonType","className","root","secondaryClass","label","Primary","Secondary","secondary","withStyles","theme","createStyles","White","background","ShareableLavender","height","padding","borderRadius","letterSpacing","breakpoints","down","margin","s8","backgroundColor","ShareableLightLavender","DisabledText","DisabledBackground","border","borderWidth","borderColor","textTransform","SharedLayout","hasError","isLoading","headerText","subText","animation","src","speed","loop","autoplay","justifyContent","currentTrack","is_playing","progress_ms","likes","setCurrentlyPlayingState","setLikesState","onError","getCurrentlyPlaying","currentlyPlaying","getLikes","items","length","name","userProfile","account","spotifyUserId","ShareableService","login","code","ShareableErrorCodes","AccountNotFound","register","userIsLoggedIn","Promise","all","setFocusedTrack","href","like","index","MapDispatchToProps","connect","setUserProfile","keys","logout","history","push","reload","profile","imageStyle","image","imageUrl","defaultProfileImage","onClickImage","open","externalUrl","info","email","country","followers","onClick","maxTopPageOffset","topLimit","topArtistsTimeRange","SpotifyTimeRange","ShortTerm","topTracksTimeRange","topArtistsPage","topTracksPage","setTopsState","getTop","SpotifyTopType","Artists","topArtists","Tracks","topTracks","topArtistsError","topTracksError","SpotifyTimeRangeToDisplay","MediumTerm","LongTerm","SpotifyTimeRangeList","timeRangeForType","row","timeToggle","range","topType","topElement","scrollLeft","increment","pageState","previousState","previousPage","nextPage","scrollTopTypeStart","currentPage","pageToggle","disabled","incrementPage","renderTimeRangeButtons","responsiveRowStyle","artist","responsiveProfileStyles","images","url","external_urls","spotify","displayKeys","rank","genres","renderPageChange","album","title","artists","mobileStyles","isWidthDown","overflowX","flexWrap","alignItems","s16","scrollBehavior","s12","s48","maxWidth","withWidth","SHAREABLE_SERVICE_API_HOSTNAME","LOGIN_API","REGISTER_API","SpotifyErrorMessages","hasTokenInStorage","checkExpiration","SpotifyToken","setExpiration","profileFromStorage","UserProfile","getUserProfile","display_name","total","access_token","tokenFromStorage","resolveTokenInStorage","request","deviceIds","play","device_ids","limit","offset","timeRange","uris","method","body","fetch","headers","errorHandler","bind","TokenExpired","Headers","Authorization","Section","streamSection","s32","spotifyToken","module","exports","Track","artistName","trackTitle","hasData","coverArt","alt","renderArtists","renderTrackTitle","progress","Player","deviceId","isActive","transferPlayback","playerData","setDevice","syncCurrentlyPlaying","custom","autoPlay","showSaveIcon","persistDeviceSelection","callback","handlePlayerCallback","sliderColor","savedColor","Footer","footer","position","left","bottom","Header","isRightAligned","keepRightHeaders","keepLeftHeaders","filter","to","headerItem","activeStyle","headerItemActive","responsiveHeaderStyle","responsiveLeftHeaderStyle","logo","renderHeaderItem","headerRight","headerContents","paddingLeft","paddingRight","headerLeft","top","ScreenBackground","zIndex","cursor","textDecoration","Profile","styleOverride","profileContainer","imageStyleOverride","infoKeys","infoValues","textAlign"],"mappings":"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","file":"static/js/main.81e3b455.chunk.js","sourcesContent":["import * as AppStateTypes from 'AppStateTypes';\nimport { ActionTypes } from '../actions/';\n\ninterface FocusedTrack {\n  track: any;\n  isPlaying: boolean;\n}\n\nexport const initialState: FocusedTrack = {\n  track: undefined,\n  isPlaying: false,\n};\n\nexport const focusedTrackReducer = (state: FocusedTrack = initialState, action: AppStateTypes.RootAction) => {\n  switch (action.type) {\n    case ActionTypes.SET_FOCUSED: {\n      const { track: { id } = {} } = state;\n      // Only update the store if it is a new track\n      if (action.payload && id !== action.payload.id) {\n        return {\n          ...state,\n          track: action.payload,\n          isPlaying: true,\n        };\n      } else {\n        return state;\n      }\n    }\n    case ActionTypes.PAUSE_FOCUSED: {\n      return {\n        ...state,\n        track: action.payload,\n        isPlaying: false,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { focusedTrackReducer } from './currently-playing.reducer';\n\nconst rootReducer = combineReducers({\n  focusedTrack: focusedTrackReducer,\n});\n\nexport default rootReducer;\n","import { createStore, Store, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reduxThunk from 'redux-thunk';\n\nimport * as AppStateTypes from 'AppStateTypes';\n\nimport config from '../config';\n\nimport rootReducer from './reducers';\n\nconst middleware = [reduxThunk];\n\nlet store: Store<AppStateTypes.ReducerState>;\n\nif (config.obfuscateDevTools) {\n  store = createStore(rootReducer, applyMiddleware(...middleware));\n} else {\n  // Only allow redux dev tools in a dev environment\n  store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)));\n}\n\nexport default store;\n","import './App.css';\n\nimport React from 'react';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport withSizes from 'react-sizes';\n\nimport { hot } from 'react-hot-loader/root';\n\nimport { Provider } from 'react-redux';\n\nimport backgroundImage from './assets/bg.jpg';\n\nimport { Colors, APP_FOOTER_HEIGHT, APP_HEADER_HEIGHT, getAppMargin, Spacing } from './styles';\nimport { Footer, Header } from './components';\nimport { Home } from './pages';\nimport { SpotifyService } from './services';\nimport { AppRoutes, mapSizesToProps } from './utils';\nimport store from './redux/store';\n\ninterface AppProps {\n  isMobile: boolean;\n}\n\ninterface AppState {\n  loggedIn: boolean;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loggedIn: false,\n    };\n  }\n\n  async componentDidMount() {\n    const token = SpotifyService.resolveUserToken();\n    this.setState({ loggedIn: !!token });\n  }\n\n  renderRoutes() {\n    const { loggedIn } = this.state;\n    const { isMobile } = this.props;\n\n    let responsiveStyle = {\n      ...styles.routeContainer,\n      marginLeft: getAppMargin(isMobile),\n      marginRight: getAppMargin(isMobile),\n    };\n\n    return (\n      <div style={responsiveStyle}>\n        {!loggedIn && <Home />}\n        {loggedIn && (\n          <Switch>\n            {AppRoutes.map((route) => {\n              const { path, page } = route;\n              return <Route key={route.path} exact path={path} component={page} />;\n            })}\n          </Switch>\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    const { loggedIn } = this.state;\n    const { isMobile } = this.props;\n\n    return (\n      <Provider store={store}>\n        <Router basename=\"/shareable/\">\n          <div style={styles.app}>\n            <Header isMobile={isMobile} />\n            {this.renderRoutes()}\n            {loggedIn && <Footer />}\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default hot(withSizes(mapSizesToProps)(App));\n\nconst styles: Record<string, React.CSSProperties> = {\n  app: {\n    backgroundImage: `linear-gradient(to top, rgba(24, 13, 34, 0.52), rgba(2, 10, 26, 0.78)), url(${backgroundImage})`,\n    backgroundSize: '100% 100%',\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    color: Colors.c100,\n    fontFamily: 'Muli',\n    fontWeight: 500,\n  },\n  routeContainer: {\n    marginTop: APP_HEADER_HEIGHT,\n    marginBottom: APP_FOOTER_HEIGHT,\n    paddingTop: Spacing.s24,\n    overflow: 'auto',\n  },\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export enum StorageKeys {\n  SpotifyToken = 'shrbl_spotify_token',\n  UserProfile = 'shrbl_user',\n  KeyDecay = 'shrbl_key_decay',\n}\n","import { StorageKeys } from './storage.constants';\n\n/**\n * This is a wrapper around localStorage with:\n * 1. fallback to in memory storage in case local storage is not available\n * 2. option to add expiration time to  values\n */\nexport const StorageService = new (class {\n  storage = localStorage;\n\n  /** Gets a stored value if exists\n   * returns null if not exist or in case of error .\n   * @memberof LocalStoreService\n   * @method get\n   * @param {string} key\n   * @return {string | null}\n   */\n  get(key: string): string | null {\n    try {\n      return this.storage.getItem(key);\n    } catch (error) {}\n    return null;\n  }\n\n  /** Sets data for a key in storage\n   * in case of error accessing localStorage, will change storage mode to in memory\n   * @memberof LocalStoreService\n   * @method set\n   * @param {string} key\n   * @param {string} data\n   * @return {void}\n   */\n  set(key: string, data: string): void {\n    try {\n      this.storage.setItem(key, data);\n    } catch (error) {\n      console.log(error);\n      // this.storage = new TempStorage();\n      // this.storage.setItem(key, data);\n    }\n  }\n\n  /** Sets expiration time for a key.\n   * key references a key in the local store\n   * @memberof LocalStoreService\n   * @method setExpiration\n   * @param {string} key\n   * @param {number} duration\n   * @return {void}\n   */\n  setExpiration(key: string, duration: number): void {\n    const expirationsValue: any = this.get(StorageKeys.KeyDecay);\n    const expirations: any = (expirationsValue && JSON.parse(expirationsValue)) || {};\n    expirations[key] = Date.now() + duration;\n    this.set(StorageKeys.KeyDecay, JSON.stringify(expirations));\n  }\n\n  /** Removes expired keys from local store\n   * @memberof LocalStoreService\n   * @method checkExpiration\n   * @return {void}\n   */\n  checkExpiration(): void {\n    let expirations: any;\n    if (!(expirations = JSON.parse(this.get(StorageKeys.KeyDecay) || 'null'))) {\n      return;\n    }\n    const now = Date.now();\n\n    Object.entries(expirations).forEach(([key, val]) => {\n      if (now <= Number(val)) {\n        return;\n      }\n      this.remove(key);\n      delete expirations[key];\n    });\n\n    this.set(StorageKeys.KeyDecay, JSON.stringify(expirations));\n  }\n\n  /** Removes a key from the store\n   * @memberof LocalStoreService\n   * @method removeItem\n   * @param {string} key\n   * @return {void}\n   */\n  remove(key: string): void {\n    try {\n      this.storage.removeItem(key);\n    } catch (error) {}\n  }\n})();\n","export enum Spacing {\n  s0 = 0,\n  s2 = 2,\n  s4 = 4,\n  s8 = 8,\n  s12 = 12,\n  s16 = 16,\n  s24 = 24,\n  s32 = 32,\n  s48 = 48,\n  s64 = 64,\n  s128 = 128,\n  s224 = 224,\n  s512 = 512,\n}\n\nexport const getAppMargin = (isMobile: boolean = true) => {\n  return isMobile ? Spacing.s24 : Spacing.s224;\n};\nexport const APP_HEADER_HEIGHT = Spacing.s64;\nexport const APP_FOOTER_HEIGHT = Spacing.s512;\n","export enum Colors {\n  // brand colors\n  ShareableLavender = '#6767d7',\n  ShareableLightLavender = '#7b7bf9',\n  // blacks/greys/white\n  c600 = '#1C2124', // body text\n  c500 = '#66747D', // subdued text\n  c400 = '#86939C', // Icon default\n  c300 = '#C7D0D6', // input outline\n  c200 = '#E4E9ED', // card outline\n  c100 = '#F5F8FA', // background and disabled\n  c0 = '#FFF', // white\n  // TODO: add more colors\n  // Helper Colors\n  ScreenBackground = '#282c34',\n  White = '#fff',\n  Black = '#000',\n  Transparent = 'rgba(52, 52, 52, 0)',\n  TransparentDark = 'rgba(52, 52, 52, 0.9)',\n  DisabledText = '#ababab',\n  DisabledBackground = '#ffffff30',\n}\n","export const FontSizes = {\n  ExtraLarge: {\n    fontSize: 48,\n    lineHeight: '54px',\n  },\n  Large: {\n    fontSize: 36,\n    lineHeight: '54px',\n  },\n  MediumLarge: {\n    fontSize: 28,\n    lineHeight: '36px',\n  },\n  Medium: {\n    fontSize: 20,\n    lineHeight: '30px',\n  },\n  MediumSmall: {\n    fontSize: 14,\n    lineHeight: '20px',\n  },\n  Small: {\n    fontSize: 12,\n    lineHeight: '18px',\n  },\n  ExtraSmall: {\n    fontSize: 11,\n    lineHeight: '16px',\n  },\n};\n","import { ThunkAction } from 'redux-thunk';\nimport { AnyAction } from 'redux';\n\nimport { action } from 'typesafe-actions';\n\nimport { SpotifyService, Track } from '../../services';\n\n// use typescript enum rather than action constants\nexport enum ActionTypes {\n  PAUSE_FOCUSED = 'PAUSE_FOCUSED',\n  SET_FOCUSED = 'SET_FOCUSED',\n}\n\n// State actions\nexport const pauseFocused = (track: Track) => action(ActionTypes.PAUSE_FOCUSED, track);\nexport const setFocused = (track: Track) => action(ActionTypes.SET_FOCUSED, track);\n\n// Thunk actions\nexport const playSong = (track: Track): ThunkAction<void, {}, {}, AnyAction> => {\n  // Thunk middleware will pass the dispatch method to this function\n  return (dispatch): void => {\n    SpotifyService.playSongs([track.uri]);\n    dispatch(setFocused(track));\n  };\n};\n","// Get the hash of the url\nexport const hash: any = window.location.hash\n  .substring(1)\n  .split('&')\n  .reduce(function (initial: any, item: string) {\n    if (item) {\n      const parts = item.split('=');\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = '';\n","export function parseJson(response: any) {\n  return response.text().then(function (text: any) {\n    return text ? JSON.parse(text) : {};\n  });\n}\n","import { Home, Stream, Account, Stats } from '../pages';\n\n/**\n * @prop path - required\n * @prop page - required\n * @prop header - optional, value to display on header nav\n * @prop rightAlignedHeader - optional, if the header is right aligned\n */\nexport interface AppRoute {\n  path: string;\n  page: any;\n  header?: string;\n  rightAlignedHeader?: boolean;\n}\n\nexport const AppRoutes: AppRoute[] = [\n  // Header routes\n  {\n    path: '/',\n    page: Home,\n    header: 'shareable',\n  },\n  {\n    path: '/stats',\n    page: Stats,\n    header: 'stats',\n  },\n  {\n    path: '/stream',\n    page: Stream,\n    header: 'stream',\n  },\n  {\n    path: '/account',\n    page: Account,\n    header: 'account',\n    rightAlignedHeader: true,\n  },\n  // Other routes\n];\n","export const mapSizesToProps = ({ width }: any) => ({\n  isMobile: width < 500,\n});\n","import config from '../../config';\n\n// APIs\nexport const SPOTIFY_API_HOSTNAME = 'https://api.spotify.com';\nexport const PLAYER_API = `${SPOTIFY_API_HOSTNAME}/v1/me/player`;\nexport const SAVED_TRACKS_API = `${SPOTIFY_API_HOSTNAME}/v1/me/tracks`;\nexport const USER_PROFILE_API = `${SPOTIFY_API_HOSTNAME}/v1/me`;\nexport const USER_TOP_API = `${SPOTIFY_API_HOSTNAME}/v1/me/top`;\nexport const PLAYER_PLAY_API = `${SPOTIFY_API_HOSTNAME}/v1/me/player/play`;\n\n// Auth\nexport const AUTH_API = 'https://accounts.spotify.com/authorize';\nexport const LOGIN_OAUTH = `${AUTH_API}?client_id=${config.clientId}&redirect_uri=${\n  config.redirectUri\n}&scope=${config.scopes.join('%20')}&response_type=token&show_dialog=true`;\n","export const scopes = [\n  'user-top-read',\n  'user-read-currently-playing',\n  'user-read-playback-state',\n  'user-library-read',\n  'streaming',\n  'user-read-email',\n  'user-read-private',\n  'user-library-modify',\n  'user-follow-read',\n];\n\nconst dev = {\n  redirectUri: 'http://localhost:3000/',\n  obfuscateDevTools: false,\n  shareableServiceUri: 'http://localhost:4000',\n};\n\nconst prod = {\n  redirectUri: 'https://thmsngyn.github.io/shareable/',\n  obfuscateDevTools: true,\n  shareableServiceUri: 'http://localhost:4000',\n};\n\nconst config = process.env.REACT_APP_STAGE === 'prod' ? prod : dev;\n\nexport default {\n  // Common configs\n  clientId: '05b0a9e4fb784b1c866f6235ae139c3a',\n  scopes,\n\n  // Dev configs\n  ...config,\n};\n","import React from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n  Button as MaterialButton,\n  ButtonProps as MaterialButtonProps,\n  Theme,\n  createStyles,\n  WithStyles,\n} from '@material-ui/core';\n\nimport { Colors, Spacing } from '../../styles';\n\ninterface OwnProps extends WithStyles<typeof styles> {\n  buttonType?: ButtonTypes;\n}\ntype ButtonProps = MaterialButtonProps & OwnProps;\n\nexport enum ButtonTypes {\n  Primary = 'primary',\n  Secondary = 'secondary',\n}\n\nclass Button extends React.Component<ButtonProps> {\n  constructor(props: ButtonProps) {\n    super(props);\n  }\n\n  componentDidMount() {}\n\n  get secondaryClass() {\n    const { buttonType = ButtonTypes.Primary, classes } = this.props;\n    return buttonType === ButtonTypes.Secondary ? classes.secondary : '';\n  }\n\n  render() {\n    const { children, classes, buttonType, ...materialProps } = this.props;\n\n    return (\n      <MaterialButton {...materialProps} className={`${classes.root} ${this.secondaryClass} ${classes.label}`}>\n        {children}\n      </MaterialButton>\n    );\n  }\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      fontFamily: 'Muli',\n      fontWeight: 800,\n      color: Colors.White,\n      background: Colors.ShareableLavender,\n      height: 48,\n      padding: '0 25px',\n      borderRadius: 4,\n      letterSpacing: 0.6,\n      [theme.breakpoints.down('sm')]: {\n        width: '100%',\n        margin: `${Spacing.s8}px 0px`,\n      },\n      '&:hover': {\n        backgroundColor: Colors.ShareableLightLavender,\n      },\n      '&:disabled': {\n        color: Colors.DisabledText,\n        backgroundColor: Colors.DisabledBackground,\n        border: 0,\n      },\n    },\n    secondary: {\n      background: 'transparent',\n      border: 'solid',\n      borderWidth: 1,\n      borderColor: Colors.White,\n      '&:hover': {\n        backgroundColor: Colors.ShareableLavender,\n        borderColor: Colors.ShareableLavender,\n        borderWidth: 1,\n      },\n    },\n    label: {\n      textTransform: 'none',\n    },\n  });\n\nexport default withStyles(styles)(Button);\n","import React from 'react';\n\nimport { Section } from '../../components';\n\n// TODO: Move somewhere else?\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      'lottie-player': any;\n    }\n  }\n}\n\nexport interface SharedLayoutProps {\n  hasError: boolean;\n  isLoading: boolean;\n}\nexport interface SharedLayoutState {}\n\n/**\n * Responsible for shared page layout and states\n */\nexport class SharedLayout extends React.Component<SharedLayoutProps, SharedLayoutState> {\n  componentDidMount() {}\n\n  render() {\n    const { children, hasError, isLoading } = this.props;\n\n    if (hasError) {\n      return (\n        <Section headerText={'Something bad happened...'} subText={'Please refresh the page and try again.'}>\n          <div style={styles.animation}>\n            <lottie-player\n              src=\"https://assets3.lottiefiles.com/packages/lf20_3x5I70.json\"\n              background=\"transparent\"\n              speed=\"1\"\n              style={{ width: 350, height: 'auto' }}\n              loop\n              autoplay\n            ></lottie-player>\n          </div>\n        </Section>\n      );\n    }\n    if (isLoading) {\n      return (\n        <Section>\n          <div style={styles.animation}>\n            <lottie-player\n              src=\"https://assets8.lottiefiles.com/packages/lf20_6R2HIH.json\"\n              background=\"transparent\"\n              speed=\"2\"\n              style={{ width: 350, height: 350 }}\n              loop\n              autoplay\n            ></lottie-player>\n          </div>\n        </Section>\n      );\n    }\n\n    return children;\n  }\n}\n\nconst styles: Record<any, React.CSSProperties> = {\n  animation: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n};\n","import React from 'react';\n\nimport { Section } from '../../components';\nimport {\n  TracksEntity,\n  SpotifyService,\n  SpotifyError,\n  CurrentPlaybackResponse,\n  LikesResponse,\n  Track as TrackType,\n} from '../../services';\nimport { SharedLayout } from '../shared-layout';\n\ninterface StreamProps {}\ninterface StreamState {\n  hasError: boolean;\n  currentTrack: TrackType | undefined;\n  is_playing: boolean;\n  progress_ms: number;\n  likes: TracksEntity[];\n}\n\nexport class Stream extends React.Component<StreamProps, StreamState> {\n  constructor(props: StreamProps) {\n    super(props);\n\n    this.state = {\n      currentTrack: undefined,\n      is_playing: true,\n      progress_ms: 0,\n      likes: [],\n      hasError: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setCurrentlyPlayingState((error: SpotifyError) => {\n      // Something bad happened\n      this.setState({ hasError: true });\n    });\n    this.setLikesState((error: SpotifyError) => {\n      // Something bad happened\n      this.setState({ hasError: true });\n    });\n  }\n\n  async setCurrentlyPlayingState(onError: Function) {\n    const currentlyPlaying: CurrentPlaybackResponse = await SpotifyService.getCurrentlyPlaying();\n    const { error } = currentlyPlaying;\n\n    if (error) {\n      return onError(error);\n    }\n\n    this.setState({\n      currentTrack: currentlyPlaying.item,\n    });\n  }\n\n  async setLikesState(onError: Function) {\n    const likes: LikesResponse = await SpotifyService.getLikes();\n    const { error } = likes;\n\n    if (error) {\n      return onError(error);\n    }\n\n    this.setState({ likes: likes.items! });\n  }\n\n  render() {\n    const { hasError, currentTrack, likes } = this.state;\n    const isLoading = !currentTrack && !likes.length;\n\n    return (\n      <SharedLayout hasError={hasError} isLoading={isLoading}>\n        <Section\n          headerText={'Stream feed'}\n          subText={'Under development. The intent of this page is to be a live stream of music your friends like.'}\n        ></Section>\n      </SharedLayout>\n    );\n  }\n}\n","import React, { Fragment } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport * as AppStateTypes from 'AppStateTypes';\nimport { Section, Track, Button } from '../../components';\nimport { ButtonTypes } from '../../components/shared/button.component';\nimport { SharedLayout } from '../shared-layout';\nimport {\n  SpotifyService,\n  LOGIN_OAUTH,\n  SpotifyError,\n  CurrentPlaybackResponse,\n  LikesResponse,\n  TracksEntity,\n  SpotifyUserProfile,\n} from '../../services';\nimport { setFocused } from '../../redux/actions';\nimport { ShareableService, ShareableErrorCodes } from '../../services/shareable';\n\ninterface OwnProps {}\ninterface DispatchProps {\n  setFocusedTrack: typeof setFocused;\n}\ninterface StateProps {\n  focusedTrack: any;\n}\n\ntype HomeProps = OwnProps & DispatchProps & StateProps;\n\ninterface HomeState {\n  hasError: boolean;\n  loggedIn: boolean;\n  isLoading: boolean;\n  name: string;\n  likes: TracksEntity[];\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      loggedIn: false,\n      isLoading: true,\n      name: '',\n      likes: [],\n    };\n  }\n\n  resolveUser(userProfile: SpotifyUserProfile) {\n    const { id: spotifyUserId } = userProfile;\n    const account = { spotifyUserId };\n    ShareableService.login(account).then((response) => {\n      const { code } = response;\n\n      if (code) {\n        if (code === ShareableErrorCodes.AccountNotFound) {\n          ShareableService.register(account).then((response) => {\n            // TODO: Handle error cases\n          });\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    // TODO: https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow\n    // To refresh the access token automatically\n    const loggedIn = SpotifyService.userIsLoggedIn();\n    if (loggedIn) {\n      Promise.all([\n        SpotifyService.userProfile().then((userProfile: SpotifyUserProfile) => {\n          this.setState({ name: userProfile.name.split(' ')[0] });\n          return userProfile;\n        }),\n        this.setCurrentlyPlayingState((error: SpotifyError) => {\n          // Something bad happened\n          this.setState({ hasError: true });\n        }),\n        this.setLikesState((error: SpotifyError) => {\n          // Something bad happened\n          this.setState({ hasError: true });\n        }),\n      ]).then(([userProfile, resolved2, resolved3]) => {\n        // this.resolveUser(userProfile);\n        this.setState({ isLoading: false });\n      });\n    }\n    this.setState({ loggedIn });\n  }\n\n  async setCurrentlyPlayingState(onError: Function) {\n    const { setFocusedTrack } = this.props;\n\n    const currentlyPlaying: CurrentPlaybackResponse = await SpotifyService.getCurrentlyPlaying();\n    const { error, item } = currentlyPlaying;\n\n    if (error) {\n      return onError(error);\n    }\n\n    if (currentlyPlaying.item && setFocusedTrack) {\n      setFocusedTrack(item);\n    }\n  }\n\n  async setLikesState(onError: Function) {\n    const likes: LikesResponse = await SpotifyService.getLikes();\n    const { error } = likes;\n\n    if (error) {\n      return onError(error);\n    }\n\n    this.setState({ likes: likes.items! });\n  }\n\n  render() {\n    const { hasError, loggedIn, name, isLoading, likes } = this.state;\n    const { focusedTrack } = this.props;\n\n    return (\n      <SharedLayout hasError={hasError} isLoading={loggedIn && isLoading}>\n        {!loggedIn && (\n          <Fragment>\n            <Section headerText={`Welcome!`} subText={'Please login with your spotify credentials to continue.'}>\n              <Button href={LOGIN_OAUTH}>Login to Spotify</Button>\n            </Section>\n          </Fragment>\n        )}\n        {loggedIn && (\n          <Fragment>\n            <Section\n              headerText={`Welcome ${name}!`}\n              subText={'You can now play music and view your personalized stats.'}\n            ></Section>\n            <Section headerText={'Currently playing'}>\n              <Track track={focusedTrack} />\n            </Section>\n            <Section headerText={'Likes'}>\n              {likes.map((like, index) => {\n                return <Track key={index} track={like.track} />;\n              })}\n            </Section>\n          </Fragment>\n        )}\n      </SharedLayout>\n    );\n  }\n}\n\nconst MapStateToProps = (store: AppStateTypes.ReducerState): StateProps => {\n  return {\n    focusedTrack: store.focusedTrack.track,\n  };\n};\n\nconst MapDispatchToProps = {\n  setFocusedTrack: setFocused,\n};\n\nexport default connect(MapStateToProps, MapDispatchToProps)(Home);\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport defaultProfileImage from '../../assets/badminton.png';\n\nimport { SharedLayout } from '../shared-layout';\nimport { Section, Profile } from '../../components';\nimport { SpotifyService, SpotifyUserProfile } from '../../services';\nimport { Button } from '../../components/shared';\nimport { StorageService, StorageKeys } from '../../services/storage';\nimport { ButtonTypes } from '../../components/shared/button.component';\n\ninterface AccountProps extends RouteComponentProps<any> {}\ninterface AccountState {\n  hasError: boolean;\n  userProfile: any;\n}\n\nexport class Account extends React.Component<AccountProps, AccountState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      userProfile: {} as SpotifyUserProfile,\n    };\n  }\n\n  componentDidMount() {\n    this.setUserProfile(() => {\n      this.setState({ hasError: true });\n    });\n  }\n\n  async setUserProfile(onError: Function) {\n    const userProfile = await SpotifyService.userProfile();\n    const { error } = userProfile;\n\n    if (error) {\n      return onError(error);\n    }\n\n    this.setState({ userProfile });\n  }\n\n  logout() {\n    Object.keys(StorageKeys).forEach((key) => StorageService.remove((StorageKeys as any)[key]));\n    SpotifyService.logout();\n    this.props.history.push('/');\n    window.location.reload();\n  }\n\n  render() {\n    const { hasError, userProfile } = this.state;\n\n    return (\n      <SharedLayout hasError={hasError} isLoading={false}>\n        <Section headerText={`Account information`}>\n          <Profile\n            style={styles.profile}\n            imageStyle={styles.image}\n            imageUrl={userProfile.imageUrl || defaultProfileImage}\n            onClickImage={() => window.open(userProfile.externalUrl, '_blank')}\n            info={{\n              name: userProfile.name,\n              email: userProfile.email,\n              country: userProfile.country,\n              followers: userProfile.followers,\n            }}\n          ></Profile>\n        </Section>\n        <Section>\n          <Button\n            buttonType={ButtonTypes.Secondary}\n            onClick={() => {\n              this.logout();\n            }}\n          >\n            Logout\n          </Button>\n        </Section>\n      </SharedLayout>\n    );\n  }\n}\n\nconst styles: Record<any, React.CSSProperties> = {\n  profile: {\n    width: '100%',\n  },\n  image: {\n    width: 80,\n    height: 'auto',\n  },\n};\n","import React from 'react';\n\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport { SharedLayout } from '../shared-layout';\nimport { Section, Profile, Button } from '../../components';\nimport { TopResponse, SpotifyService, SpotifyTopType, ArtistsEntity, SpotifyTimeRange, Track } from '../../services';\nimport { Spacing } from '../../styles';\nimport { playSong } from '../../redux/actions';\nimport { ButtonTypes } from '../../components/shared/button.component';\nimport { withWidth, isWidthDown } from '@material-ui/core';\n\ninterface OwnProps {\n  width: any;\n}\n\ninterface DispatchProps {\n  playSong: typeof playSong;\n}\n\ntype StatsProps = OwnProps & DispatchProps;\n\ninterface StatsState {\n  hasError: boolean;\n  topArtistsTimeRange: SpotifyTimeRange;\n  topTracksTimeRange: SpotifyTimeRange;\n  topArtists?: any;\n  topTracks?: any;\n  isLoading: boolean;\n  topArtistsPage: number;\n  topTracksPage: number;\n}\n\nclass Stats extends React.Component<StatsProps, StatsState> {\n  maxTopPageOffset = 5;\n  topLimit = 10;\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      topArtistsTimeRange: SpotifyTimeRange.ShortTerm,\n      topTracksTimeRange: SpotifyTimeRange.ShortTerm,\n      hasError: false,\n      isLoading: true,\n      topArtistsPage: 0,\n      topTracksPage: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.setTopsState(() => this.setState({ hasError: true }));\n  }\n\n  async setTopsState(onError: Function) {\n    const { topArtistsTimeRange, topTracksTimeRange, topArtistsPage, topTracksPage } = this.state;\n    const topArtists: TopResponse = await SpotifyService.getTop(\n      SpotifyTopType.Artists,\n      topArtistsTimeRange,\n      this.topLimit,\n      topArtistsPage * this.topLimit\n    );\n    const topTracks: TopResponse = await SpotifyService.getTop(\n      SpotifyTopType.Tracks,\n      topTracksTimeRange,\n      this.topLimit,\n      topTracksPage * this.topLimit\n    );\n\n    const { error: topArtistsError } = topArtists;\n    const { error: topTracksError } = topTracks;\n\n    if (topArtistsError || topTracksError) {\n      return onError(topArtistsError, topTracksError);\n    }\n\n    this.setState({ topArtists, topTracks, isLoading: false });\n  }\n\n  renderTimeRangeButtons(type: SpotifyTopType) {\n    const SpotifyTimeRangeToDisplay = {\n      [SpotifyTimeRange.ShortTerm]: 'Last 4 weeks',\n      [SpotifyTimeRange.MediumTerm]: 'Last 6 months',\n      [SpotifyTimeRange.LongTerm]: 'Last several years',\n    };\n    const SpotifyTimeRangeList = [SpotifyTimeRange.ShortTerm, SpotifyTimeRange.MediumTerm, SpotifyTimeRange.LongTerm];\n    const timeRangeForType: keyof StatsState =\n      type === SpotifyTopType.Artists ? 'topArtistsTimeRange' : 'topTracksTimeRange';\n\n    return (\n      <div style={{ ...styles.row, ...styles.timeToggle }}>\n        {SpotifyTimeRangeList.map((range, index) => {\n          return (\n            <Button\n              key={index}\n              onClick={() => {\n                // Using never as a workaround when calling setState with dynamic keys\n                this.setState<never>({ [timeRangeForType]: range }, () =>\n                  this.setTopsState(() => this.setState({ hasError: true }))\n                );\n              }}\n            >\n              {SpotifyTimeRangeToDisplay[range]}\n            </Button>\n          );\n        })}\n      </div>\n    );\n  }\n\n  scrollTopTypeStart(topType: SpotifyTopType) {\n    const topElement = document.getElementById(topType);\n\n    if (topElement) {\n      topElement.scrollLeft = 0;\n    }\n  }\n\n  incrementPage(topType: SpotifyTopType, increment: number) {\n    const pageState = topType === SpotifyTopType.Artists ? 'topArtistsPage' : 'topTracksPage';\n\n    this.setState<never>(\n      (previousState) => {\n        let previousPage = previousState[pageState];\n        const nextPage = previousPage + increment >= this.maxTopPageOffset ? 0 : previousPage + increment;\n        return { [pageState]: nextPage };\n      },\n      () => {\n        this.setTopsState(() => this.setState({ hasError: true }));\n        this.scrollTopTypeStart(topType);\n      }\n    );\n  }\n\n  renderPageChange(topType: SpotifyTopType) {\n    const pageState = topType === SpotifyTopType.Artists ? 'topArtistsPage' : 'topTracksPage';\n    const currentPage: number = this.state[pageState];\n    return (\n      <div style={{ ...styles.row, ...styles.pageToggle }}>\n        <Button\n          style={{ width: 'auto' }}\n          disabled={currentPage === 0}\n          buttonType={ButtonTypes.Secondary}\n          onClick={() => this.incrementPage(topType, -1)}\n        >\n          Back\n        </Button>\n        <Button\n          style={{ width: 'auto' }}\n          disabled={currentPage + 1 === this.maxTopPageOffset}\n          buttonType={ButtonTypes.Secondary}\n          onClick={() => this.incrementPage(topType, 1)}\n        >\n          Next\n        </Button>\n        <div>Page {currentPage + 1}</div>\n      </div>\n    );\n  }\n\n  get responsiveRowStyle(): React.CSSProperties {\n    const { width } = this.props;\n    const mobileStyles: React.CSSProperties = isWidthDown('sm', width)\n      ? {\n          overflowX: 'auto',\n          flexDirection: 'column',\n          flexWrap: 'wrap',\n          alignItems: 'flex-start',\n          height: '325px',\n          width: 'auto',\n        }\n      : {};\n    return {\n      ...styles.row,\n      ...mobileStyles,\n    };\n  }\n\n  get responsiveProfileStyles(): React.CSSProperties {\n    const { width } = this.props;\n    const mobileStyles: React.CSSProperties = isWidthDown('sm', width)\n      ? {\n          width: 'fit-content',\n          marginRight: Spacing.s16,\n        }\n      : {};\n    return {\n      ...styles.profile,\n      ...mobileStyles,\n    };\n  }\n\n  render() {\n    const {\n      hasError,\n      topArtists,\n      topTracks,\n      isLoading,\n      topArtistsTimeRange,\n      topTracksTimeRange,\n      topArtistsPage,\n      topTracksPage,\n    } = this.state;\n    const SpotifyTimeRangeToDisplay = {\n      [SpotifyTimeRange.ShortTerm]: 'Last 4 weeks',\n      [SpotifyTimeRange.MediumTerm]: 'Last 6 months',\n      [SpotifyTimeRange.LongTerm]: 'Last several years',\n    };\n\n    return (\n      <SharedLayout hasError={hasError} isLoading={isLoading}>\n        <div>\n          <Section headerText={`Top artists (${SpotifyTimeRangeToDisplay[topArtistsTimeRange]})`}>\n            {this.renderTimeRangeButtons(SpotifyTopType.Artists)}\n            <div id={SpotifyTopType.Artists} style={this.responsiveRowStyle}>\n              {topArtists &&\n                topArtists!.items!.map((artist: ArtistsEntity, index: number) => {\n                  return (\n                    <Profile\n                      key={index}\n                      style={this.responsiveProfileStyles}\n                      imageStyle={styles.image}\n                      imageUrl={artist.images![0].url}\n                      onClickImage={() => window.open(artist.external_urls.spotify, '_blank')}\n                      displayKeys={false}\n                      info={{\n                        rank: `${index + topArtistsPage * 10 + 1}`,\n                        name: artist.name,\n                        genres: artist.genres!.join(', '),\n                      }}\n                    ></Profile>\n                  );\n                })}\n            </div>\n            {this.renderPageChange(SpotifyTopType.Artists)}\n          </Section>\n        </div>\n        <div>\n          <Section headerText={`Top tracks (${SpotifyTimeRangeToDisplay[topTracksTimeRange]})`}>\n            {this.renderTimeRangeButtons(SpotifyTopType.Tracks)}\n            <div id={SpotifyTopType.Tracks} style={this.responsiveRowStyle}>\n              {topTracks &&\n                topTracks!.items!.map((track: Track, index: number) => {\n                  return (\n                    <Profile\n                      key={index}\n                      style={this.responsiveProfileStyles}\n                      imageStyle={styles.image}\n                      imageUrl={track.album!.images![0].url}\n                      onClickImage={() => this.props.playSong(track)}\n                      displayKeys={false}\n                      info={{\n                        rank: `${index + topTracksPage * 10 + 1}`,\n                        title: track.name,\n                        artist: track.artists![0].name,\n                      }}\n                    ></Profile>\n                  );\n                })}\n            </div>\n            {this.renderPageChange(SpotifyTopType.Tracks)}\n          </Section>\n        </div>\n      </SharedLayout>\n    );\n  }\n}\n\nconst styles: Record<any, React.CSSProperties> = {\n  row: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: Spacing.s16,\n    scrollBehavior: 'smooth',\n  },\n  profile: {\n    width: 500,\n    marginBottom: Spacing.s12,\n    marginRight: Spacing.s48,\n  },\n  image: {\n    width: 100,\n    height: 100,\n  },\n  timeToggle: {\n    maxWidth: '525px',\n  },\n  pageToggle: {\n    maxWidth: '275px',\n    flexWrap: 'nowrap',\n  },\n};\n\nconst MapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\n  playSong: (track: any) => dispatch(playSong(track)),\n});\n\nexport default connect(undefined, MapDispatchToProps)(withWidth()(Stats));\n","import config from '../../config';\n\n// APIs\nexport const SHAREABLE_SERVICE_API_HOSTNAME = config.shareableServiceUri;\nexport const LOGIN_API = `${SHAREABLE_SERVICE_API_HOSTNAME}/accounts/login`;\nexport const REGISTER_API = `${SHAREABLE_SERVICE_API_HOSTNAME}/accounts`;\nexport const GET_STREAM_API = `${SHAREABLE_SERVICE_API_HOSTNAME}/stream`;\nexport const ADD_SHARE_API = `${SHAREABLE_SERVICE_API_HOSTNAME}/stream/share`;\nexport const REMOVE_SHARE_API = `${SHAREABLE_SERVICE_API_HOSTNAME}/stream/share`;\n\nexport enum ShareableErrorCodes {\n  AccountNotFound = 1000,\n  EntityAlreadyExists = 1001,\n  InvalidAccessSpotifyAccessToken = 1002,\n  SpotifyAccessTokenExpired = 1003,\n}\n","// Currently Playing\nexport interface CurrentPlaybackResponse {\n  device: Device;\n  shuffle_state: boolean;\n  repeat_state: string;\n  timestamp: number;\n  context: Context;\n  progress_ms: number;\n  item: Track;\n  currently_playing_type: string;\n  actions: Actions;\n  is_playing: boolean;\n  error?: SpotifyError;\n}\nexport interface Device {\n  id: string;\n  is_active: boolean;\n  is_private_session: boolean;\n  is_restricted: boolean;\n  name: string;\n  type: string;\n  volume_percent: number;\n}\nexport interface Context {\n  external_urls: ExternalUrls;\n  href: string;\n  type: string;\n  uri: string;\n}\nexport interface ExternalUrls {\n  spotify: string;\n}\n\nexport interface Album {\n  album_type: string;\n  artists?: ArtistsEntity[] | null;\n  available_markets?: string[] | null;\n  external_urls: ExternalUrls;\n  href: string;\n  id: string;\n  images?: ImagesEntity[] | null;\n  name: string;\n  release_date: string;\n  release_date_precision: string;\n  total_tracks: number;\n  type: string;\n  uri: string;\n}\n\nexport interface ArtistsEntity {\n  external_urls: ExternalUrls;\n  followers?: Followers;\n  genres?: string[] | null;\n  href: string;\n  id: string;\n  images?: ImagesEntity[] | null;\n  name: string;\n  popularity?: number;\n  type: string;\n  uri: string;\n}\n\nexport interface ImagesEntity {\n  height: number;\n  url: string;\n  width: number;\n}\nexport interface ExternalIds {\n  isrc: string;\n}\nexport interface Actions {\n  disallows: Disallows;\n}\nexport interface Disallows {\n  resuming: boolean;\n}\n\n// Likes\nexport interface LikesResponse {\n  href: string;\n  items?: TracksEntity[] | null;\n  limit: number;\n  next: string;\n  offset: number;\n  previous?: null;\n  total: number;\n  error?: SpotifyError;\n}\nexport interface TracksEntity {\n  added_at: string;\n  track: Track;\n}\nexport interface Track {\n  album: Album;\n  artists?: ArtistsEntity[] | null;\n  available_markets?: string[] | null;\n  disc_number: number;\n  duration_ms: number;\n  explicit: boolean;\n  external_ids: ExternalIds;\n  external_urls: ExternalUrls;\n  href: string;\n  id: string;\n  is_local: boolean;\n  name: string;\n  popularity: number;\n  preview_url: string;\n  track_number: number;\n  type: string;\n  uri: string;\n}\n\n// Top\nexport enum SpotifyTimeRange {\n  ShortTerm = 'short_term', // 4 weeks\n  MediumTerm = 'medium_term', // 6 months\n  LongTerm = 'long_term', // Several years of data\n}\n\nexport enum SpotifyTopType {\n  Artists = 'artists',\n  Tracks = 'tracks',\n}\n\nexport interface TopResponse {\n  items?: ArtistsEntity[] | Track[];\n  total: number;\n  limit: number;\n  offset: number;\n  href: string;\n  previous?: null;\n  next: string;\n  error?: SpotifyError;\n}\n\nexport interface Followers {\n  href?: null;\n  total: number;\n}\n\n// Errors\nexport interface SpotifyError {\n  status: number;\n  message: string;\n}\n\nexport enum SpotifyErrorMessages {\n  TokenExpired = 'The access token expired',\n}\n\nexport interface SpotifyUserProfile {\n  name: string;\n  externalUrl: string;\n  imageUrl: string;\n  email: string;\n  country: string;\n  error: string;\n  id: string;\n  uri: string;\n}\n","import { hash, parseJson } from '../../utils';\nimport { StorageService, StorageKeys } from '../storage';\n\nimport { PLAYER_API, SAVED_TRACKS_API, USER_PROFILE_API, USER_TOP_API, PLAYER_PLAY_API } from './spotify.constants';\nimport {\n  CurrentPlaybackResponse,\n  LikesResponse,\n  SpotifyErrorMessages,\n  SpotifyUserProfile,\n  SpotifyTimeRange,\n  SpotifyTopType,\n} from './spotify.types';\n\nexport const SpotifyService = new (class {\n  private token: string = '';\n  constructor() {}\n\n  private get headers() {\n    return new Headers({\n      Authorization: 'Bearer ' + this.token,\n    });\n  }\n\n  private resolveTokenInStorage(hasTokenInStorage: boolean, token: string) {\n    if (!hasTokenInStorage) {\n      StorageService.set(StorageKeys.SpotifyToken, token);\n      StorageService.setExpiration(StorageKeys.SpotifyToken, 36000000); // 1 hr\n    } else {\n      StorageService.checkExpiration();\n    }\n  }\n\n  logout() {\n    this.token = '';\n  }\n\n  async userProfile(): Promise<SpotifyUserProfile> {\n    const profileFromStorage = StorageService.get(StorageKeys.UserProfile);\n\n    if (!profileFromStorage) {\n      const response = await this.getUserProfile();\n      const { display_name: name, external_urls, images, email, country, followers, error, uri, id } = response;\n      const imageUrl = images && images.length && images[0].url;\n      const externalUrl = external_urls && external_urls.spotify;\n\n      const userProfile = {\n        name,\n        externalUrl,\n        email,\n        country,\n        imageUrl,\n        followers: followers && followers.total,\n        error,\n        uri,\n        id,\n      };\n      StorageService.set(StorageKeys.UserProfile, JSON.stringify(userProfile));\n      return userProfile;\n    } else {\n      return JSON.parse(profileFromStorage);\n    }\n  }\n\n  userIsLoggedIn(): boolean {\n    return !!this.token;\n  }\n\n  resolveUserToken(): string {\n    // Set token\n    this.token = hash.access_token;\n    const tokenFromStorage = StorageService.get(StorageKeys.SpotifyToken);\n\n    if (!!tokenFromStorage || !!this.token) {\n      this.token = tokenFromStorage || this.token;\n      this.resolveTokenInStorage(!!tokenFromStorage, this.token);\n      return this.token;\n    }\n    return '';\n  }\n\n  getUserProfile(): Promise<any> {\n    return this.request(USER_PROFILE_API, 'GET');\n  }\n\n  getCurrentlyPlaying(): Promise<CurrentPlaybackResponse> {\n    // Make a call using the token\n    return this.request(PLAYER_API, 'GET');\n  }\n\n  /**\n   * Transfer playback to a new device and determine if it should start playing.\n   * @param deviceIds array of device ids to transfer playback to, only a single device id is currently supported\n   * @param play true: ensure playback happens on new device. false or not provided: keep the current playback state.\n   */\n  transferPlayback(deviceIds: string[], play: boolean = false): Promise<any> {\n    return this.request(PLAYER_API, 'PUT', { device_ids: deviceIds, play });\n  }\n\n  getLikes(limit: number = 10, offset: number = 0): Promise<LikesResponse> {\n    return this.request(`${SAVED_TRACKS_API}?limit=${limit}&offset=${offset}`, 'GET');\n  }\n\n  getTop(\n    type: SpotifyTopType,\n    timeRange: SpotifyTimeRange = SpotifyTimeRange.ShortTerm,\n    limit: number = 10,\n    offset: number = 0\n  ): Promise<any> {\n    return this.request(`${USER_TOP_API}/${type}?limit=${limit}&offset=${offset}&time_range=${timeRange}`, 'GET');\n  }\n\n  playSongs(uris: string[]): Promise<any> {\n    return this.request(`${PLAYER_PLAY_API}`, 'PUT', { uris });\n  }\n\n  request(url: string, method: string, body?: any): Promise<any> {\n    return fetch(url, {\n      method,\n      headers: this.headers,\n      body: JSON.stringify(body),\n    })\n      .then(parseJson)\n      .then(this.errorHandler.bind(this));\n  }\n\n  errorHandler(response: any) {\n    const { error } = response;\n    if (error) {\n      switch (error.message) {\n        case SpotifyErrorMessages.TokenExpired:\n          StorageService.remove(StorageKeys.SpotifyToken);\n      }\n    }\n    return response;\n  }\n})();\n","import React from 'react';\nimport { Spacing, FontSizes } from '../../styles';\n\ninterface SectionProps {\n  headerText?: string;\n  subText?: string;\n}\n\nexport class Section extends React.Component<SectionProps> {\n  componentDidMount() {}\n\n  render() {\n    const { headerText, subText, children } = this.props;\n    return (\n      <div style={styles.streamSection}>\n        {headerText && <div style={styles.headerText}>{headerText}</div>}\n        {subText && <div style={styles.subText}>{subText}</div>}\n        {children}\n      </div>\n    );\n  }\n}\n\nconst styles: Record<any, React.CSSProperties> = {\n  streamSection: {\n    marginTop: Spacing.s32,\n  },\n  headerText: {\n    marginBottom: Spacing.s16,\n    fontFamily: 'Muli',\n    fontWeight: 600,\n    ...FontSizes.Medium,\n  },\n  subText: {\n    marginBottom: Spacing.s16,\n  },\n};\n","export * from './shareable.service';\nexport * from './shareable.constants';\nexport * from './shareable.types';\n","import { parseJson } from '../../utils';\n\nimport { SpotifyService } from '../spotify/spotify.service';\nimport { LOGIN_API, REGISTER_API } from './shareable.constants';\nimport { ShareableAccount } from './shareable.types';\n\nexport const ShareableService = new (class {\n  constructor() {}\n\n  get spotifyToken() {\n    return SpotifyService.resolveUserToken();\n  }\n\n  private get headers() {\n    return new Headers({\n      'Content-Type': 'application/json',\n    });\n  }\n\n  login(account: ShareableAccount) {\n    return this.request(LOGIN_API, 'POST', {\n      ...account,\n      token: this.spotifyToken,\n    });\n  }\n\n  register(account: ShareableAccount) {\n    return this.request(REGISTER_API, 'POST', {\n      ...account,\n      token: this.spotifyToken,\n    });\n  }\n\n  request(url: string, method: string, body?: any): Promise<any> {\n    return fetch(url, {\n      method,\n      headers: this.headers,\n      body: JSON.stringify(body),\n    })\n      .then(parseJson)\n      .then(this.errorHandler.bind(this));\n  }\n\n  errorHandler(response: any) {\n    const { error } = response;\n    if (error) {\n    }\n    return response;\n  }\n})();\n","module.exports = __webpack_public_path__ + \"static/media/bg.336ebad2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/badminton.c7bae4fd.png\";","import React, { Fragment } from 'react';\n\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport './track.css';\nimport './track.scss';\n\nimport { Track as TrackType } from '../../services';\nimport { Spacing, FontSizes } from '../../styles';\nimport { playSong } from '../../redux/actions';\n\ninterface OwnProps {\n  track: TrackType;\n}\ninterface DispatchProps {\n  playSong: typeof playSong;\n}\ninterface StateProps {}\n\ntype TrackProps = OwnProps & DispatchProps & StateProps;\n\ninterface TrackState {}\n\nclass Track extends React.Component<TrackProps, TrackState> {\n  renderArtists() {\n    const { track } = this.props;\n\n    return <div style={styles.artistName}>{track.artists!.map((artist: any) => artist.name).join(', ')}</div>;\n  }\n\n  renderTrackTitle() {\n    const { track } = this.props;\n\n    return <div style={styles.trackTitle}>{track.name}</div>;\n  }\n\n  hasData(track: TrackType) {\n    return track && track.album!.images![0].url && track.artists;\n  }\n\n  render() {\n    const { track } = this.props;\n\n    return (\n      <div className=\"track\" style={styles.track}>\n        {this.hasData(track) ? (\n          <Fragment>\n            <div style={styles.coverArt}>\n              <img\n                alt={'trackImage'}\n                className=\"art\"\n                src={track.album!.images![0].url}\n                onClick={() => this.props.playSong(track)}\n              />\n            </div>\n            <div className=\"track__content\">\n              {this.renderArtists()}\n              {this.renderTrackTitle()}\n            </div>\n          </Fragment>\n        ) : (\n          <div>Nothing found</div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst styles: Record<any, React.CSSProperties> = {\n  progress: {\n    marginTop: Spacing.s16,\n  },\n  artistName: {\n    ...FontSizes.MediumSmall,\n  },\n  track: {\n    marginBottom: Spacing.s24,\n  },\n  coverArt: {\n    marginRight: Spacing.s16,\n  },\n  trackTitle: {\n    ...FontSizes.Large,\n  },\n};\n\nconst MapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\n  playSong: (track: any) => dispatch(playSong(track)),\n});\n\nexport default connect(undefined, MapDispatchToProps)(Track);\n","import React from 'react';\n\nimport { connect } from 'react-redux';\n\nimport SpotifyPlayer from 'react-spotify-web-playback';\nimport { IProps, IStylesProps, ICallbackState } from 'react-spotify-web-playback/lib/types/common';\nimport { IPlayerTrack } from 'react-spotify-web-playback/lib/types/spotify';\n\nimport { SpotifyService } from '../../services';\nimport { Colors } from '../../styles';\nimport { setFocused } from '../../redux/actions';\n\ntype ReducedSpotifyPlayerProps = Pick<IProps, Exclude<keyof IProps, 'token'>>;\ninterface OwnProps extends ReducedSpotifyPlayerProps {}\n\ninterface DispatchProps {\n  setFocusedTrack: typeof setFocused;\n}\n\ntype PlayerProps = OwnProps & DispatchProps;\n\ninterface PlayerState {\n  token: string;\n  deviceId: string;\n}\nclass Player extends React.Component<PlayerProps, PlayerState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      token: '',\n      deviceId: '',\n    };\n  }\n\n  componentDidMount() {\n    const token = SpotifyService.resolveUserToken();\n    if (token) {\n      this.setState({ token });\n    }\n  }\n\n  setDevice(deviceId: string, isActive: boolean) {\n    const { deviceId: stateDeviceId } = this.state;\n    if (!stateDeviceId && deviceId) {\n      if (!isActive) {\n        this.setState({ deviceId });\n        SpotifyService.transferPlayback([deviceId]);\n      }\n    }\n  }\n\n  syncCurrentlyPlaying(track: IPlayerTrack) {\n    // Sync the currently playing data from the library player\n    // This helps with syncing back with other players like the desktop app\n    this.props.setFocusedTrack({\n      ...track,\n      artists: track.artists.split(', ').map((artistName: string) => {\n        return { name: artistName };\n      }),\n      album: {\n        images: [{ url: track.image }],\n      },\n    } as any); // TODO: Build the proper object type. Consider requesting the track from spotify\n  }\n\n  handlePlayerCallback(playerData: ICallbackState) {\n    const { deviceId, isActive, track } = playerData; // Top level deviceId is always this device\n    this.setDevice(deviceId, isActive);\n    this.syncCurrentlyPlaying(track);\n  }\n\n  render() {\n    return (\n      <SpotifyPlayer\n        name={'Shareable Web Player'}\n        styles={styles.custom}\n        token={this.state.token}\n        autoPlay={true}\n        showSaveIcon={true}\n        persistDeviceSelection={true}\n        callback={this.handlePlayerCallback.bind(this)}\n      />\n    );\n  }\n}\n\nconst styles: Record<string, React.CSSProperties & IStylesProps> = {\n  custom: {\n    sliderColor: Colors.ShareableLavender,\n    savedColor: Colors.ShareableLavender,\n  },\n};\n\nconst MapDispatchToProps = {\n  setFocusedTrack: setFocused,\n};\n\nexport default connect(undefined, MapDispatchToProps)(Player);\n","import React from 'react';\n\nimport { Player } from '../player';\n\nexport class Footer extends React.Component {\n  componentDidMount() {}\n\n  render() {\n    return (\n      <div style={styles.footer}>\n        <Player />\n      </div>\n    );\n  }\n}\n\nconst styles: Record<string, React.CSSProperties> = {\n  footer: {\n    position: 'fixed',\n    left: 0,\n    bottom: 0,\n    width: '100%',\n  },\n};\n","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nimport logo from '../../assets/logo.png';\nimport { FontSizes, Colors, APP_HEADER_HEIGHT, getAppMargin } from '../../styles';\nimport { AppRoutes, AppRoute } from '../../utils';\n\ninterface HeaderProps {\n  isMobile: boolean;\n}\ninterface HeaderState {}\nexport class Header extends React.Component<HeaderProps, HeaderState> {\n  componentDidMount() {}\n\n  renderHeaderItem(isRightAligned: boolean = false) {\n    const keepRightHeaders = (route: AppRoute) => {\n      return !route.header || (route.header && route.rightAlignedHeader === true);\n    };\n    const keepLeftHeaders = (route: AppRoute) => {\n      return !route.header || (route.header && !route.rightAlignedHeader);\n    };\n\n    return AppRoutes.filter((route) => (isRightAligned ? keepRightHeaders(route) : keepLeftHeaders(route))).map(\n      (route) => {\n        return (\n          <NavLink\n            key={route.path}\n            exact\n            to={route.path}\n            style={styles.headerItem}\n            activeStyle={styles.headerItemActive}\n          >\n            {route.header}\n          </NavLink>\n        );\n      }\n    );\n  }\n\n  get responsiveHeaderStyle() {\n    const { isMobile } = this.props;\n    let responsiveHeaderStyle = {\n      ...styles.headerContents,\n      paddingLeft: getAppMargin(isMobile),\n      paddingRight: getAppMargin(isMobile),\n    };\n    if (isMobile) {\n      responsiveHeaderStyle = {\n        ...responsiveHeaderStyle,\n        fontSize: (responsiveHeaderStyle.fontSize as number) - 6,\n      };\n    }\n\n    return responsiveHeaderStyle;\n  }\n\n  get responsiveLeftHeaderStyle() {\n    const { isMobile } = this.props;\n    return { ...styles.headerLeft, width: isMobile ? 250 : 300 };\n  }\n\n  render() {\n    return (\n      <div style={styles.header}>\n        <div style={this.responsiveHeaderStyle}>\n          <div style={this.responsiveLeftHeaderStyle}>\n            <NavLink exact to={'/'} style={styles.headerItem} activeStyle={styles.headerItemActive}>\n              <img style={styles.logo} src={logo} alt=\"logo\" />\n            </NavLink>\n            {this.renderHeaderItem()}\n          </div>\n          <div style={styles.headerRight}>{this.renderHeaderItem(true)}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles: Record<string, React.CSSProperties> = {\n  header: {\n    width: '100%',\n    position: 'fixed',\n    left: 0,\n    top: 0,\n    backgroundColor: Colors.White,\n    color: Colors.ScreenBackground,\n    height: APP_HEADER_HEIGHT,\n    zIndex: 1,\n  },\n  headerContents: {\n    display: 'flex',\n    alignItems: 'center',\n    height: '100%',\n    ...FontSizes.Medium,\n  },\n  logo: {\n    width: 25,\n    height: 25,\n  },\n  headerLeft: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    width: 300,\n  },\n  headerRight: {\n    display: 'flex',\n    marginLeft: 'auto',\n  },\n  headerItem: {\n    display: 'flex',\n    cursor: 'pointer',\n    textDecoration: 'none',\n    color: Colors.ScreenBackground,\n  },\n  headerItemActive: {\n    fontWeight: 700,\n  },\n};\n","import React, { CSSProperties } from 'react';\nimport { Spacing } from '../../styles';\n\ninterface ProfileProps {\n  imageUrl: string;\n  onClickImage: Function;\n  info: Record<string, string>;\n  style?: CSSProperties;\n  imageStyle?: CSSProperties;\n  displayKeys?: boolean;\n}\n\nexport class Profile extends React.Component<ProfileProps> {\n  componentDidMount() {}\n\n  render() {\n    const { imageUrl, info, style, imageStyle, displayKeys = true, onClickImage } = this.props;\n    const styleOverride = {\n      ...styles.profileContainer,\n      ...style,\n    };\n    const imageStyleOverride = {\n      ...styles.image,\n      ...imageStyle,\n    };\n\n    return (\n      <div style={styleOverride}>\n        <div>\n          <img\n            alt={'profileImage'}\n            className=\"art\"\n            style={imageStyleOverride}\n            src={imageUrl}\n            onClick={() => onClickImage()}\n          />\n        </div>\n        {displayKeys && (\n          <div style={styles.infoKeys}>\n            {Object.keys(info).map((key) => {\n              return <div key={key}>{key}</div>;\n            })}\n          </div>\n        )}\n        <div style={styles.infoValues}>\n          {Object.keys(info).map((key) => {\n            return <div key={key}>{info[key]}</div>;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles: Record<any, React.CSSProperties> = {\n  profileContainer: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n  },\n  image: {\n    marginRight: Spacing.s16,\n  },\n  infoKeys: {\n    textAlign: 'right',\n    marginRight: Spacing.s12,\n  },\n  infoValues: {\n    fontWeight: 600,\n  },\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.6111c5a7.png\";"],"sourceRoot":""}